{"version":3,"sources":["Components/Cell/Cell.jsx","Components/Row/Row.jsx","Components/Table/Table.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","setState","value","target","display","determineDisplay","x","y","updateCells","onKeyPressOnInput","key","hasNewValue","onKeyPressOnSpan","state","editing","onBlur","handleUnselectAll","selected","onChangedValue","emitUnselectAllEvent","unselectAllEvent","Event","window","document","dispatchEvent","clicked","timer","setTimeout","prevent","delay","doubleClicked","clearTimeout","_ref","slice","res","executeFormula","error","result","calculateCss","css","width","padding","margin","height","boxSizing","position","color","border","textAlign","verticalAlign","fontSize","lineHeight","overflow","fontFamily","backgroundColor","fontWeight","addEventListener","nextProps","nextState","removeEventListener","_this2","react_default","a","createElement","style","alpha","split","onKeyPress","role","outlineColor","outlineStyle","type","autoFocus","onClick","onDoubleClick","Component","Row","cells","push","Components_Cell_Cell","concat","handleChangedCell","rowData","Table","modifiedData","assign","data","localStorage","setItem","tableIdentifier","JSON","stringify","forceUpdate","cell","parser","parse","toString","id","FormulaParser","on","cellCoord","done","column","index","row","Error","ERROR_NOT_AVAILABLE","ERROR_REF","startCellCoord","endCellCoord","sx","sy","ex","ey","fragment","colFragment","saveToLocalStorage","getItem","rows","Components_Row_Row","App","className","Components_Table_Table","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA4MeA,qBAvMb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAuCRQ,SAAW,SAACC,GACVR,EAAKS,SAAS,CAAEC,MAAOF,EAAEG,OAAOD,QAChCV,EAAKY,QAAUZ,EAAKa,iBAAiB,CAAEC,EAAGd,EAAKD,MAAMe,EAAGC,EAAGf,EAAKD,MAAMgB,GAAKP,EAAEG,OAAOD,OACpFV,EAAKD,MAAMiB,eA3CMhB,EA8CnBiB,kBAAoB,SAACT,GACL,UAAVA,EAAEU,KACJlB,EAAKmB,YAAYX,EAAEG,OAAOD,QAhDXV,EAoDnBoB,iBAAmB,WACZpB,EAAKqB,MAAMC,SACdtB,EAAKS,SAAS,CAAEa,SAAS,KAtDVtB,EA0DnBuB,OAAS,SAACf,GACRR,EAAKmB,YAAYX,EAAEG,OAAOD,QA3DTV,EA8DnBwB,kBAAoB,YACdxB,EAAKqB,MAAMI,UAAYzB,EAAKqB,MAAMC,UACpCtB,EAAKS,SAAS,CAAEgB,UAAU,EAAOH,SAAS,KAhE3BtB,EAoEnBmB,YAAc,SAACT,GACbV,EAAKD,MAAM2B,eACT,CACEZ,EAAGd,EAAKD,MAAMe,EACdC,EAAGf,EAAKD,MAAMgB,GAEhBL,GAEFV,EAAKS,SAAS,CAAEa,SAAS,KA5ERtB,EA+EnB2B,qBAAuB,WACrB,IAAMC,EAAmB,IAAIC,MAAM,eACnCC,OAAOC,SAASC,cAAcJ,IAjFb5B,EAoFnBiC,QAAU,WACRjC,EAAKkC,MAAQC,WAAW,WACjBnC,EAAKoC,UACRpC,EAAK2B,uBACL3B,EAAKS,SAAS,CAAEgB,UAAU,KAE5BzB,EAAKoC,SAAU,GACdpC,EAAKqC,QA3FSrC,EA8FnBsC,cAAgB,WACdC,aAAavC,EAAKkC,OAClBlC,EAAKoC,SAAU,EACfpC,EAAK2B,uBACL3B,EAAKS,SAAS,CAAEa,SAAS,EAAMG,UAAU,KAlGxBzB,EAqGnBa,iBAAmB,SAAA2B,EAAW9B,GAAU,IAAlBI,EAAkB0B,EAAlB1B,EAAGC,EAAeyB,EAAfzB,EACvB,GAA0B,MAAtBL,EAAM+B,MAAM,EAAG,GAAY,CAC7B,IAAMC,EAAM1C,EAAKD,MAAM4C,eAAe,CAAE7B,IAAGC,KAAKL,EAAM+B,MAAM,IAC5D,OAAkB,OAAdC,EAAIE,MACC,UAEFF,EAAIG,OAEb,OAAOnC,GA7GUV,EAgHnB8C,aAAe,WACb,IAAMC,EAAM,CACVC,MAAO,OACPC,QAAS,MACTC,OAAQ,IACRC,OAAQ,OACRC,UAAW,aACXC,SAAU,WACVzC,QAAS,eACT0C,MAAO,QACPC,OAAQ,oBACRC,UAAW,OACXC,cAAe,MACfC,SAAU,OACVC,WAAY,OACZC,SAAU,SACVC,WAAY,6DASd,OANqB,IAAjB7D,EAAKD,MAAMe,GAA4B,IAAjBd,EAAKD,MAAMgB,IACnCgC,EAAIS,UAAY,SAChBT,EAAIe,gBAAkB,UACtBf,EAAIgB,WAAa,QAGZhB,GAvIP/C,EAAKqB,MAAQ,CACXC,SAAS,EACTZ,MAAOX,EAAMW,OAEfV,EAAKY,QAAUZ,EAAKa,iBAAiB,CAAEC,EAAGf,EAAMe,EAAGC,EAAGhB,EAAMgB,GAAKhB,EAAMW,OACvEV,EAAKkC,MAAQ,EACblC,EAAKqC,MAAQ,IACbrC,EAAKoC,SAAU,EATEpC,mFAajB8B,OAAOC,SAASiC,iBAAiB,cAAe7D,KAAKqB,iEAIjCyC,EAAWC,GAC/B,MAAyB,KAArB/D,KAAKkB,MAAMX,OAAiD,MAAjCP,KAAKkB,MAAMX,MAAM+B,MAAM,EAAG,KAIrDyB,EAAUxD,QAAUP,KAAKkB,MAAMX,OAC/BwD,EAAU5C,UAAYnB,KAAKkB,MAAMC,SACjC4C,EAAUzC,WAAatB,KAAKkB,MAAMI,UAClCwC,EAAUvD,QAAUP,KAAKJ,MAAMW,qDAQnCP,KAAKS,QAAUT,KAAKU,iBAAiB,CAAEC,EAAGX,KAAKJ,MAAMe,EAAGC,EAAGZ,KAAKJ,MAAMgB,GAAKZ,KAAKkB,MAAMX,sDAItFoB,OAAOC,SAASoC,oBAAoB,cAAehE,KAAKqB,oDAuGjD,IAAA4C,EAAAjE,KACD4C,EAAM5C,KAAK2C,eAEjB,GAAqB,IAAjB3C,KAAKJ,MAAMe,EACb,OACEuD,EAAAC,EAAAC,cAAA,QAAMC,MAAOzB,GACV5C,KAAKJ,MAAMgB,GAKlB,GAAqB,IAAjBZ,KAAKJ,MAAMgB,EAAS,CACtB,IAAM0D,EAAQ,8BAA8BC,MAAM,IAClD,OACEL,EAAAC,EAAAC,cAAA,QAAMI,WAAYxE,KAAKiB,iBAAkBoD,MAAOzB,EAAK6B,KAAK,gBACvDH,EAAMtE,KAAKJ,MAAMe,IAUxB,OALIX,KAAKkB,MAAMI,WACbsB,EAAI8B,aAAe,YACnB9B,EAAI+B,aAAe,UAGjB3E,KAAKkB,MAAMC,QAEX+C,EAAAC,EAAAC,cAAA,SACEC,MAAOzB,EACPgC,KAAK,OACLxD,OAAQpB,KAAKoB,OACboD,WAAYxE,KAAKc,kBACjBP,MAAOP,KAAKkB,MAAMX,MAClBH,SAAUJ,KAAKI,SACfyE,WAAS,IAKbX,EAAAC,EAAAC,cAAA,QACAU,QAAS,SAAAzE,GAAC,OAAI4D,EAAKnC,QAAQzB,IAC3B0E,cAAe,SAAA1E,GAAC,OAAI4D,EAAK9B,cAAc9B,IACvCgE,MAAOzB,EACP6B,KAAK,gBAEJzE,KAAKS,gBA3LOuE,cCqCJC,EApCH,SAACrF,GAIX,IAFA,IAAMsF,EAAQ,GACRtE,EAAIhB,EAAMgB,EACPD,EAAI,EAAGA,EAAIf,EAAMe,EAAGA,GAAK,EAChCuE,EAAMC,KACJjB,EAAAC,EAAAC,cAACgB,EAAD,CACErE,IAAG,GAAAsE,OAAK1E,EAAL,KAAA0E,OAAUzE,GACbA,EAAGA,EACHD,EAAGA,EACHY,eAAgB3B,EAAM0F,kBACtBzE,YAAajB,EAAMiB,YACnBN,MAAOX,EAAM2F,QAAQ5E,IAAM,GAC3B6B,eAAgB5C,EAAM4C,kBAK5B,OACE0B,EAAAC,EAAAC,cAAA,WACGc,WCmIQM,cApJb,SAAAA,EAAY5F,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwF,IACjB3F,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0F,GAAArF,KAAAH,KAAMJ,KAuER0F,kBAAoB,SAAAjD,EAAW9B,GAAU,IAAlBI,EAAkB0B,EAAlB1B,EAAGC,EAAeyB,EAAfzB,EAClB6E,EAAe3F,OAAO4F,OAAO,GAAI7F,EAAKqB,MAAMyE,MAC7CF,EAAa7E,KAAI6E,EAAa7E,GAAK,IACxC6E,EAAa7E,GAAGD,GAAKJ,EACrBV,EAAKS,SAAS,CAAEqF,KAAMF,IAElB9D,QAAUA,OAAOiE,cACnBjE,OAAOiE,aAAaC,QAAQhG,EAAKiG,gBAC/BC,KAAKC,UAAUP,KAhFF5F,EA+FnBgB,YAAc,WACZhB,EAAKoG,eAhGYpG,EAmGnB2C,eAAiB,SAAC0D,EAAM3F,GACtBV,EAAKsG,OAAOD,KAAOA,EACnB,IAAI3D,EAAM1C,EAAKsG,OAAOC,MAAM7F,GAC5B,OAAiB,MAAbgC,EAAIE,MACCF,EAEqB,KAA1BA,EAAIG,OAAO2D,WACN9D,GAEiC,MAAtCA,EAAIG,OAAO2D,WAAW/D,MAAM,EAAG,KAEjCC,EAAM1C,EAAK2C,eAAe0D,EAAM3D,EAAIG,OAAOJ,MAAM,KAG5CC,IA/GP1C,EAAKiG,gBAAL,aAAAT,OAAoCzF,EAAM0G,IAE1CzG,EAAKqB,MAAQ,CACXyE,KAAM,IAER9F,EAAKsG,OAAS,IAAII,SAClB1G,EAAKsG,OAAOK,GAAG,gBAAiB,SAACC,EAAWC,GAC1C,IAAM/F,EAAI8F,EAAUE,OAAOC,MAAQ,EAC7BhG,EAAI6F,EAAUI,IAAID,MAAQ,EAEhC,GAAIjG,EAAId,EAAKD,MAAMe,GAAKC,EAAIf,EAAKD,MAAMgB,EACrC,MAAMf,EAAKsG,OAAOW,MAAMjH,EAAKsG,OAAOY,qBAGtC,GAAIlH,EAAKsG,OAAOD,KAAKvF,IAAMA,GAAKd,EAAKsG,OAAOD,KAAKtF,IAAMA,EACrD,MAAMf,EAAKsG,OAAOW,MAAMjH,EAAKsG,OAAOa,WAGtC,OAAKnH,EAAKqB,MAAMyE,KAAK/E,IAAOf,EAAKqB,MAAMyE,KAAK/E,GAAGD,GAIxC+F,EAAK7G,EAAKqB,MAAMyE,KAAK/E,GAAGD,IAHtB+F,EAAK,MAMhB7G,EAAKsG,OAAOK,GAAG,iBACb,SAACS,EAAgBC,EAAcR,GAO/B,IANA,IAAMS,EAAKF,EAAeN,OAAOC,MAAQ,EACnCQ,EAAKH,EAAeJ,IAAID,MAAQ,EAChCS,EAAKH,EAAaP,OAAOC,MAAQ,EACjCU,EAAKJ,EAAaL,IAAID,MAAQ,EAC9BW,EAAW,GAER3G,EAAIwG,EAAIxG,GAAK0G,EAAI1G,GAAK,EAAG,CAChC,IAAMiG,EAAMhH,EAAKqB,MAAMyE,KAAK/E,GAC5B,GAAKiG,EAAL,CAMA,IAFA,IAAMW,EAAc,GAEX7G,EAAIwG,EAAIxG,GAAK0G,EAAI1G,GAAK,EAAG,CAChC,IAAIJ,EAAQsG,EAAIlG,GAKhB,GAJKJ,IACHA,EAAQ,IAGgB,MAAtBA,EAAM+B,MAAM,EAAG,GAAY,CAC7B,IAAMC,EAAM1C,EAAK2C,eAAe,CAAE7B,IAAGC,KACnCL,EAAM+B,MAAM,IACd,GAAIC,EAAIE,MACN,MAAM5C,EAAKsG,OAAOW,MAAMvE,EAAIE,OAE9BlC,EAAQgC,EAAIG,OAGd8E,EAAYrC,KAAK5E,GAEnBgH,EAASpC,KAAKqC,IAGZD,GACFb,EAAKa,KAhEQ1H,oFAqFjB,GAAIG,KAAKJ,MAAM6H,oBACX9F,QACAA,OAAOiE,aAAc,CACvB,IAAMD,EAAOhE,OAAOiE,aAAa8B,QAAQ1H,KAAK8F,iBAC1CH,GACF3F,KAAKM,SAAS,CAAEqF,KAAMI,KAAKK,MAAMT,uCA8BrC,IAFA,IAAMgC,EAAO,GAEJ/G,EAAI,EAAGA,EAAIZ,KAAKJ,MAAMgB,EAAI,EAAGA,GAAK,EAAG,CAC5C,IAAM2E,EAAUvF,KAAKkB,MAAMyE,KAAK/E,IAAM,GACtC+G,EAAKxC,KACHjB,EAAAC,EAAAC,cAACwD,EAAD,CACEtC,kBAAmBtF,KAAKsF,kBACxB9C,eAAgBxC,KAAKwC,eACrB3B,YAAab,KAAKa,YAClBE,IAAKH,EACLA,EAAGA,EACHD,EAAGX,KAAKJ,MAAMe,EAAI,EAClB4E,QAASA,KAKf,OACErB,EAAAC,EAAAC,cAAA,WACGuD,UA3IW3C,aCUL6C,mLARX,OACE3D,EAAAC,EAAAC,cAAA,OAAK0D,UAAU,OACb5D,EAAAC,EAAAC,cAAC2D,EAAD,CAAOpH,EAAG,GAAIC,EAAG,GAAI0F,GAAI,cAJftB,aCOEgD,QACW,cAA7BrG,OAAOsG,SAASC,UAEe,UAA7BvG,OAAOsG,SAASC,UAEhBvG,OAAOsG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAAS1G,SAAS2G,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.33d79fc3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Cell extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      editing: false,\r\n      value: props.value,\r\n    }\r\n    this.display = this.determineDisplay({ x: props.x, y: props.y }, props.value)\r\n    this.timer = 0\r\n    this.delay = 200\r\n    this.prevent = false\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.document.addEventListener('unselectAll', this.handleUnselectAll)\r\n  }\r\n\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.state.value !== '' && this.state.value.slice(0, 1) === '=') {\r\n      return true\r\n    }\r\n\r\n    if (nextState.value !== this.state.value ||\r\n        nextState.editing !== this.state.editing ||\r\n        nextState.selected !== this.state.selected ||\r\n        nextProps.value !== this.props.value) {\r\n      return true\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  componentWillUpdate() {\r\n    this.display = this.determineDisplay({ x: this.props.x, y: this.props.y }, this.state.value)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.document.removeEventListener('unselectAll', this.handleUnselectAll)\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ value: e.target.value })\r\n    this.display = this.determineDisplay({ x: this.props.x, y: this.props.y }, e.target.value)\r\n    this.props.updateCells()\r\n  }\r\n\r\n  onKeyPressOnInput = (e) => {\r\n    if (e.key === 'Enter') {\r\n      this.hasNewValue(e.target.value)\r\n    }\r\n  }\r\n\r\n  onKeyPressOnSpan = () => {\r\n    if (!this.state.editing) {\r\n      this.setState({ editing: true })\r\n    }\r\n  }\r\n\r\n  onBlur = (e) => {\r\n    this.hasNewValue(e.target.value)\r\n  }\r\n\r\n  handleUnselectAll = () => {\r\n    if (this.state.selected || this.state.editing) {\r\n      this.setState({ selected: false, editing: false })\r\n    }\r\n  }\r\n\r\n  hasNewValue = (value) => {\r\n    this.props.onChangedValue(\r\n      {\r\n        x: this.props.x,\r\n        y: this.props.y,\r\n      },\r\n      value,\r\n    )\r\n    this.setState({ editing: false })\r\n  }\r\n\r\n  emitUnselectAllEvent = () => {\r\n    const unselectAllEvent = new Event('unselectAll')\r\n    window.document.dispatchEvent(unselectAllEvent)\r\n  }\r\n\r\n  clicked = () => {\r\n    this.timer = setTimeout(() => {\r\n      if (!this.prevent) {\r\n        this.emitUnselectAllEvent()\r\n        this.setState({ selected: true })\r\n      }\r\n      this.prevent = false\r\n    }, this.delay)\r\n  }\r\n\r\n  doubleClicked = () => {\r\n    clearTimeout(this.timer)\r\n    this.prevent = true\r\n    this.emitUnselectAllEvent()\r\n    this.setState({ editing: true, selected: true })\r\n  }\r\n\r\n  determineDisplay = ({ x, y }, value) => {\r\n    if (value.slice(0, 1) === '=') {\r\n      const res = this.props.executeFormula({ x, y }, value.slice(1))\r\n      if (res.error !== null) {\r\n        return 'INVALID'\r\n      }\r\n      return res.result\r\n    }\r\n    return value\r\n  }\r\n\r\n  calculateCss = () => {\r\n    const css = {\r\n      width: '80px',\r\n      padding: '4px',\r\n      margin: '0',\r\n      height: '25px',\r\n      boxSizing: 'border-box',\r\n      position: 'relative',\r\n      display: 'inline-block',\r\n      color: 'black',\r\n      border: '1px solid #cacaca',\r\n      textAlign: 'left',\r\n      verticalAlign: 'top', // https://stackoverflow.com/questions/10778949/why-does-adding-text-to-a-span-change-its-position\r\n      fontSize: '14px',\r\n      lineHeight: '15px',\r\n      overflow: 'hidden',\r\n      fontFamily: 'Calibri, \\'Segoe UI\\', Thonburi, Arial, Verdana, sans-serif',\r\n    }\r\n\r\n    if (this.props.x === 0 || this.props.y === 0) {\r\n      css.textAlign = 'center'\r\n      css.backgroundColor = '#f0f0f0'\r\n      css.fontWeight = 'bold'\r\n    }\r\n\r\n    return css\r\n  }\r\n\r\n  render() {\r\n    const css = this.calculateCss()\r\n\r\n    if (this.props.x === 0) {\r\n      return (\r\n        <span style={css}>\r\n          {this.props.y}\r\n        </span>\r\n      )\r\n    }\r\n\r\n    if (this.props.y === 0) {\r\n      const alpha = ' abcdefghijklmnopqrstuvwxyz'.split('')\r\n      return (\r\n        <span onKeyPress={this.onKeyPressOnSpan} style={css} role=\"presentation\">\r\n          {alpha[this.props.x]}\r\n        </span>\r\n      )\r\n    }\r\n\r\n    if (this.state.selected) {\r\n      css.outlineColor = 'lightblue'\r\n      css.outlineStyle = 'dotted'\r\n    }\r\n\r\n    if (this.state.editing) {\r\n      return (\r\n        <input\r\n          style={css}\r\n          type=\"text\"\r\n          onBlur={this.onBlur}\r\n          onKeyPress={this.onKeyPressOnInput}\r\n          value={this.state.value}\r\n          onChange={this.onChange}\r\n          autoFocus\r\n        />\r\n      )\r\n    } \r\n    return (\r\n      <span\r\n      onClick={e => this.clicked(e)}\r\n      onDoubleClick={e => this.doubleClicked(e)}\r\n      style={css}\r\n      role=\"presentation\"\r\n    >\r\n      {this.display}\r\n    </span>\r\n    );\r\n  }\r\n}\r\n\r\nCell.propTypes = {\r\n  onChangedValue: PropTypes.func.isRequired,\r\n  x: PropTypes.number.isRequired,\r\n  y: PropTypes.number.isRequired,\r\n  executeFormula: PropTypes.func.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Cell from '../../Components/Cell/Cell';\r\n\r\nconst Row = (props) => {\r\n\r\n  const cells = []\r\n  const y = props.y\r\n  for (let x = 0; x < props.x; x += 1) {\r\n    cells.push(\r\n      <Cell\r\n        key={`${x}-${y}`}\r\n        y={y}\r\n        x={x}\r\n        onChangedValue={props.handleChangedCell}\r\n        updateCells={props.updateCells}\r\n        value={props.rowData[x] || ''}\r\n        executeFormula={props.executeFormula}\r\n      />,\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {cells}\r\n      </div>\r\n  );\r\n};\r\n\r\nRow.propTypes = {\r\n  handleChangedCell: PropTypes.func.isRequired,\r\n  updateCells: PropTypes.func.isRequired,\r\n  x: PropTypes.number.isRequired,\r\n  y: PropTypes.number.isRequired,\r\n  executeFormula: PropTypes.func.isRequired,\r\n  rowData: PropTypes.shape({\r\n    string: PropTypes.string,\r\n  }).isRequired,\r\n}\r\n\r\nexport default Row;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Row from '../../Components/Row/Row';\r\nimport { Parser as FormulaParser } from 'hot-formula-parser';\r\n\r\nclass Table extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.tableIdentifier = `tableData-${props.id}`;\r\n\r\n    this.state = {\r\n      data: {},\r\n    }\r\n    this.parser = new FormulaParser()\r\n    this.parser.on('callCellValue', (cellCoord, done) => {\r\n      const x = cellCoord.column.index + 1\r\n      const y = cellCoord.row.index + 1\r\n\r\n      if (x > this.props.x || y > this.props.y) {\r\n        throw this.parser.Error(this.parser.ERROR_NOT_AVAILABLE)\r\n      }\r\n\r\n      if (this.parser.cell.x === x && this.parser.cell.y === y) {\r\n        throw this.parser.Error(this.parser.ERROR_REF)\r\n      }\r\n\r\n      if (!this.state.data[y] || !this.state.data[y][x]) {\r\n        return done('')\r\n      }\r\n\r\n      return done(this.state.data[y][x])\r\n    })\r\n\r\n    this.parser.on('callRangeValue',\r\n      (startCellCoord, endCellCoord, done) => {\r\n      const sx = startCellCoord.column.index + 1\r\n      const sy = startCellCoord.row.index + 1\r\n      const ex = endCellCoord.column.index + 1\r\n      const ey = endCellCoord.row.index + 1\r\n      const fragment = []\r\n\r\n      for (let y = sy; y <= ey; y += 1) {\r\n        const row = this.state.data[y]\r\n        if (!row) {\r\n          continue\r\n        }\r\n\r\n        const colFragment = []\r\n\r\n        for (let x = sx; x <= ex; x += 1) {\r\n          let value = row[x]\r\n          if (!value) {\r\n            value = ''\r\n          }\r\n\r\n          if (value.slice(0, 1) === '=') {\r\n            const res = this.executeFormula({ x, y },\r\n              value.slice(1))\r\n            if (res.error) {\r\n              throw this.parser.Error(res.error)\r\n            }\r\n            value = res.result\r\n          }\r\n\r\n          colFragment.push(value)\r\n        }\r\n        fragment.push(colFragment)\r\n      }\r\n\r\n      if (fragment) {\r\n        done(fragment)\r\n      }\r\n    })\r\n  }\r\n  \r\n\r\n  \r\n\r\n  handleChangedCell = ({ x, y }, value) => {\r\n    const modifiedData = Object.assign({}, this.state.data)\r\n    if (!modifiedData[y]) modifiedData[y] = {}\r\n    modifiedData[y][x] = value\r\n    this.setState({ data: modifiedData })\r\n  \r\n    if (window && window.localStorage) {\r\n      window.localStorage.setItem(this.tableIdentifier,\r\n        JSON.stringify(modifiedData))\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this.props.saveToLocalStorage &&\r\n        window &&\r\n        window.localStorage) {\r\n      const data = window.localStorage.getItem(this.tableIdentifier)\r\n      if (data) {\r\n        this.setState({ data: JSON.parse(data) })\r\n      }\r\n    }\r\n  }\r\n\r\n  updateCells = () => {\r\n    this.forceUpdate()\r\n  }\r\n\r\n  executeFormula = (cell, value) => {\r\n    this.parser.cell = cell\r\n    let res = this.parser.parse(value)\r\n    if (res.error != null) {\r\n      return res \r\n    }\r\n    if (res.result.toString() === '') {\r\n      return res\r\n    }\r\n    if (res.result.toString().slice(0, 1) === '=') {\r\n\r\n      res = this.executeFormula(cell, res.result.slice(1))\r\n    }\r\n\r\n    return res\r\n  }\r\n\r\n  render() {\r\n\r\n    const rows = []\r\n\r\n    for (let y = 0; y < this.props.y + 1; y += 1) {\r\n      const rowData = this.state.data[y] || {}\r\n      rows.push(\r\n        <Row\r\n          handleChangedCell={this.handleChangedCell}\r\n          executeFormula={this.executeFormula}\r\n          updateCells={this.updateCells}\r\n          key={y}\r\n          y={y}\r\n          x={this.props.x + 1}\r\n          rowData={rowData}\r\n        />,\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {rows}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTable.propTypes = {\r\n  x: PropTypes.number.isRequired,\r\n  y: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default Table;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Table from './Components/Table/Table';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Table x={16} y={25} id={'1'} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}